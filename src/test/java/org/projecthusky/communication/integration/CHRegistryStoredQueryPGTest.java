/*
 * This code is made available under the terms of the Eclipse Public License v1.0 
 * in the github project https://github.com/project-husky/husky there you also 
 * find a list of the contributors and the license information.
 * 
 * This project has been developed further and modified by the joined working group Husky 
 * on the basis of the eHealth Connector opensource project from June 28, 2021, 
 * whereas medshare GmbH is the initial and main contributor/author of the eHealth Connector.
 *
 */
package org.projecthusky.communication.integration;

import org.projecthusky.common.communication.AffinityDomain;
import org.projecthusky.common.communication.AtnaConfig;
import org.projecthusky.common.communication.Destination;
import org.projecthusky.common.model.Code;
import org.projecthusky.common.model.Identificator;
import org.projecthusky.communication.ConvenienceCommunication;
import org.projecthusky.communication.testhelper.TestApplication;
import org.projecthusky.communication.testhelper.XdsTestUtils;
import org.projecthusky.communication.xd.storedquery.FindDocumentsQuery;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.openehealth.ipf.commons.audit.AuditContext;
import org.openehealth.ipf.commons.audit.DefaultAuditContext;
import org.openehealth.ipf.commons.ihe.xds.core.metadata.AvailabilityStatus;
import org.openehealth.ipf.commons.ihe.xds.core.metadata.DocumentEntry;
import org.openehealth.ipf.commons.ihe.xds.core.responses.QueryResponse;
import org.openehealth.ipf.commons.ihe.xds.core.responses.Status;
import org.opensaml.core.config.InitializationService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.WebApplicationType;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.net.URI;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Test the RegistryStoredQuery [ITI-18] transaction with the EPR Playground.
 */
@ExtendWith(value = SpringExtension.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE, classes = { TestApplication.class })
@EnableAutoConfiguration
class CHRegistryStoredQueryPGTest extends XdsTestUtils {

	private static final Logger LOGGER = LoggerFactory.getLogger(CHRegistryStoredQueryPGTest.class.getName());

	// Spring dependency injection which sets CamelContext, etc.
	@Autowired
	private ConvenienceCommunication convenienceCommunication;
	
	
	@Value(value = "${test.epdpg.xds.xcq.uri:https://epdplayground.i4mi.bfh.ch:7443/Registry/services/RegistryService}")
    private String registryURL;
		
		
	protected AuditContext auditContext = new DefaultAuditContext();

	final private String applicationOid = "2.16.840.1.113883.3.72.6.5.100.1399";
	final private String facilityOid = null;

	final private String senderApplicationOid = "1.2.3.4";

	private AffinityDomain affinityDomain = null;

	// the local patient ID as registered in the PIX Feed transaction
	final String localAssigningAuthorityOid = "1.2.3.4.123456.1";
	final String localPatientId = "waldspital-Id-1234";

	// The global patient ID generated by the community as received with the PIX Query response,
	// required in this test as destinationId parameter of the transaction.
	final String globalAssigningAuthorityOid = "1.1.1.99.1";
	final String globalPatientId = "2dc7a783-78b1-4627-94fb-610a23135c42";


	/**
	 * This method initializes opensaml, creates and start spring test application and sets the
	 * endpoint of XDS service for querying metadata.
	 *
	 * @throws Exception
	 */
	@BeforeEach
	public void setUp() throws Exception {

		// initialize the open saml factories
		InitializationService.initialize();

		// create and start spring test application
		var app = new SpringApplication(TestApplication.class);
		app.setWebApplicationType(WebApplicationType.NONE);
		app.run();

		// sets XDS service endpoint
		affinityDomain = new AffinityDomain();
		final Destination dest = new Destination();

		dest.setUri(new URI(registryURL));

		dest.setSenderApplicationOid(senderApplicationOid);
		dest.setReceiverApplicationOid(applicationOid);
		dest.setReceiverFacilityOid(facilityOid);
		affinityDomain.setRegistryDestination(dest);
		affinityDomain.setRepositoryDestination(dest);

		convenienceCommunication.setAffinityDomain(affinityDomain);
	}

	/**
	 * Query the XDS Registry for documents of a specific type, class and format code.
	 *
	 * This test checks the behavior of the
	 * {@link ConvenienceCommunication#queryDocuments(org.projecthusky.communication.xd.storedquery.AbstractStoredQuery, org.projecthusky.xua.core.SecurityHeaderElement, String messageId)}
	 * 
	 * @throws Exception
	 */
	@Test
	@SuppressWarnings("java:S5961")
	void queryFindDocuments() throws Exception {

		Identificator globalId = new Identificator(globalAssigningAuthorityOid, globalPatientId);

		final Code type = new Code("41000179103", "2.16.840.1.113883.6.96", "Immunization Record (record artifact)");
		final Code clazz = new Code("184216000", "2.16.840.1.113883.6.96", "Patient record type (record artifact)");
		final Code format = new Code("urn:che:epr:EPR_Unstructured_Document", "2.16.756.5.30.1.127.3.10.10",
				"Unstructured EPR document");

		FindDocumentsQuery findDocumentsQuery = new FindDocumentsQuery(globalId, AvailabilityStatus.APPROVED, type, clazz, format);

		// set the audit config mode to activate the ATNA logs. Please note that you
		// need to configure additional properties for the ATNA communication
		// in file application.properties
		convenienceCommunication.setAtnaConfig(AtnaConfig.AtnaConfigMode.SECURE);

		// query metadata of documents with patient ID and approved as availability status
		final QueryResponse response = convenienceCommunication.queryDocuments(findDocumentsQuery, null, null);

		// check if query was successful
		assertTrue(response.getErrors().isEmpty());
		assertEquals(Status.SUCCESS, response.getStatus());

		// check that at least one document is stored
		assertTrue(response.getDocumentEntries().size() > 0);

		// output details of the first entry found
		LOGGER.info("**");
		LOGGER.info("Document Entry size is "+response.getDocumentEntries().size());

		// log the data required for adjacent RetrieveDocumentSet transactions
		for (DocumentEntry entry : response.getDocumentEntries()) {
			// LOGGER.info("Document entry is " + documentEntry);
			LOGGER.info("documentId = " + entry.getUniqueId());
			LOGGER.info("repositoryUniqueId = " + entry.getRepositoryUniqueId());
			LOGGER.info("homeCommunityId = "+ entry.getHomeCommunityId());
			LOGGER.info("");
		}

		LOGGER.info("**");

	}

}
