/*
 * This code is made available under the terms of the Eclipse Public License v1.0 
 * in the github project https://github.com/project-husky/husky there you also 
 * find a list of the contributors and the license information.
 * 
 * This project has been developed further and modified by the joined working group Husky 
 * on the basis of the eHealth Connector opensource project from June 28, 2021, 
 * whereas medshare GmbH is the initial and main contributor/author of the eHealth Connector.
 *
 */
package org.projecthusky.communication.integration;

import org.apache.commons.io.IOUtils;
import org.projecthusky.common.communication.AffinityDomain;
import org.projecthusky.common.communication.AtnaConfig;
import org.projecthusky.common.communication.Destination;
import org.projecthusky.common.model.Code;
import org.projecthusky.common.model.Identificator;
import org.projecthusky.common.utils.datatypes.IheCx;
import org.projecthusky.communication.ConvenienceCommunication;
import org.projecthusky.communication.testhelper.TestApplication;
import org.projecthusky.communication.testhelper.XdsTestUtils;
import org.projecthusky.communication.xd.storedquery.FindDocumentsQuery;
import org.projecthusky.xua.communication.clients.XuaClient;
import org.projecthusky.xua.communication.clients.impl.ClientFactory;
import org.projecthusky.xua.communication.config.XuaClientConfig;
import org.projecthusky.xua.communication.config.impl.XuaClientConfigBuilderImpl;
import org.projecthusky.xua.communication.xua.RequestType;
import org.projecthusky.xua.communication.xua.TokenType;
import org.projecthusky.xua.communication.xua.XUserAssertionResponse;
import org.projecthusky.xua.communication.xua.impl.XUserAssertionRequestBuilderImpl;
import org.projecthusky.xua.deserialization.impl.AssertionDeserializerImpl;
import org.projecthusky.xua.hl7v3.PurposeOfUse;
import org.projecthusky.xua.hl7v3.Role;
import org.projecthusky.xua.hl7v3.impl.CodedWithEquivalentsBuilder;
import org.projecthusky.xua.saml2.Assertion;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.openehealth.ipf.commons.audit.AuditContext;
import org.openehealth.ipf.commons.audit.DefaultAuditContext;
import org.openehealth.ipf.commons.ihe.xds.core.metadata.AvailabilityStatus;
import org.openehealth.ipf.commons.ihe.xds.core.metadata.DocumentEntry;
import org.openehealth.ipf.commons.ihe.xds.core.responses.*;
import org.opensaml.core.config.InitializationService;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.WebApplicationType;
import org.springframework.boot.autoconfigure.EnableAutoConfiguration;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit.jupiter.SpringExtension;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URI;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

/**
 * Test the RegistryStoredQuery [ITI-18] transaction with Swiss requirements and
 * the Reference Environment. This test performs the following steps: 1. load a
 * test IdP Assertion from the disk 2. Use the IdP Assertion in conjunction with
 * the claims (role, purposeOfUse, EPR-SPID of the patient health record) and
 * request a X-User Assertion. 3. Use the X-User Assertion for authorization
 * with the RegistryStoredQuery [ITI-18] transaction
 */
@ExtendWith(value = SpringExtension.class)
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE, classes = { TestApplication.class })
@EnableAutoConfiguration
class CHRegistryStoredQueryTest extends XdsTestUtils {

	private static final Logger LOGGER = LoggerFactory.getLogger(CHRegistryStoredQueryTest.class.getName());

	// Spring dependency injection which sets CamelContext, etc.
	@Autowired
	private ConvenienceCommunication convenienceCommunication;

	@Value(value = "${test.xua.uri:https://ehealthsuisse.ihe-europe.net:10443/STS}")
	private String urlToXua;

	protected AuditContext auditContext = new DefaultAuditContext();;

	final private String applicationOid = "2.16.840.1.113883.3.72.6.5.100.1399";
	final private String facilityOid = null;

	final private String senderApplicationOid = "1.2.3.4";

	private AffinityDomain affinityDomain = null;

	// The global patient ID generated by the community as received with the PIX
	// Query response.
	// The global patient ID is required in this test as destinationId parameter of
	// the transaction.
	final String globalAssigningAuthorityOid = "1.3.6.1.4.1.21367.13.20.1000";
	final String globalPatientId = "IHERED-1024";

	// The Swiss unique patient identifier as expected from the PIX Query response.
	// The SPID is required as claim in the Get X-User Assertion transaction.
	final String spidAssigningAuthorityOid = "2.16.756.5.30.1.127.3.10.3";
	final String spid = "761337610411265304";

	@Value(value = "${test.xds.xcq.uri:http://ehealthsuisse.ihe-europe.net:8280/xdstools7/sim/epr-testing__for_init_gw_testing/rep/xcq}")
	private String registryUri;

	/**
	 * This method initializes opensaml, creates and start spring test application
	 * and sets the endpoint of XDS service for querying metadata.
	 *
	 * @throws Exception
	 */
	@BeforeEach
	public void setUp() throws Exception {

		// initialize the open saml factories
		InitializationService.initialize();

		auditContext.setAuditEnabled(true);

		// create and start spring test application
		var app = new SpringApplication(TestApplication.class);
		app.setWebApplicationType(WebApplicationType.NONE);
		app.run();

		// sets XDS service endpoint
		affinityDomain = new AffinityDomain();
		final Destination dest = new Destination();

		dest.setUri(new URI(registryUri));

		dest.setSenderApplicationOid(senderApplicationOid);
		dest.setReceiverApplicationOid(applicationOid);
		dest.setReceiverFacilityOid(facilityOid);
		affinityDomain.setRegistryDestination(dest);
		affinityDomain.setRepositoryDestination(dest);

		convenienceCommunication.setAffinityDomain(affinityDomain);
	}

	/**
	 * Query the XDS Registry for documents of a specific type, class and format
	 * code.
	 *
	 * This test checks the behavior of the
	 * {@link ConvenienceCommunication#queryDocuments(org.projecthusky.communication.xd.storedquery.AbstractStoredQuery,
	 * org.projecthusky.xua.core.SecurityHeaderElement, String messageId)}
	 * 
	 * @throws Exception
	 */
	@Test
	@SuppressWarnings("java:S5961")
	void queryFindDocuments() throws Exception {

		Identificator globalId = new Identificator(globalAssigningAuthorityOid, globalPatientId);

		final Code type = new Code("41000179103", "2.16.840.1.113883.6.96", "Immunization Record (record artifact)");
		final Code clazz = new Code("184216000", "2.16.840.1.113883.6.96", "Patient record type (record artifact)");
		final Code format = new Code("urn:che:epr:EPR_Unstructured_Document", "2.16.756.5.30.1.127.3.10.10",
				"Unstructured EPR document");

		FindDocumentsQuery findDocumentsQuery = new FindDocumentsQuery(globalId, AvailabilityStatus.APPROVED, type,
				clazz, format);

		// Get the X-User Assertion to authorize the Document Submission.
		Assertion xUserAssertion = getXUserAssertion();
		assertNotNull(xUserAssertion);

		// set the audit config mode to activate the ATNA logs. Please note that you
		// need to configure additional properties for the ATNA communication
		// in file application.properties
		convenienceCommunication.setAtnaConfig(AtnaConfig.AtnaConfigMode.SECURE);

		// query metadata of documents with patient ID and approved as availability
		// status
		final QueryResponse response = convenienceCommunication.queryDocuments(findDocumentsQuery, xUserAssertion,
				null);

		// check if query was successful
		assertTrue(response.getErrors().isEmpty());
		assertEquals(Status.SUCCESS, response.getStatus());

		// check that at least one document is stored
		assertTrue(response.getDocumentEntries().size() > 0);

		// output details of the first entry found
		LOGGER.info("**");
		LOGGER.info("Document Entry size is " + response.getDocumentEntries().size());
		DocumentEntry documentEntry = response.getDocumentEntries().get(0);
		LOGGER.info("First document entry is " + documentEntry);
		LOGGER.info("**");

	}

	/**
	 * Retrieve an X-User Assertion for a Healthcare Provider from the test
	 * environment. In this test the IdP Assertion required to authenticate the user
	 * in the Get X-User Assertion request is loaded from the disk.
	 *
	 * @throws Exception if something unexpected happens
	 */
	private Assertion getXUserAssertion() throws Exception {

		final String clientKeyStore = "src/test/resources/testKeystoreXua.jks";
		final String clientKeyStorePass = "changeit";

		// initialize XUA client to query XUA assertion
		XuaClientConfig xuaClientConfig = new XuaClientConfigBuilderImpl().clientKeyStore(clientKeyStore)
				.clientKeyStorePassword(clientKeyStorePass).clientKeyStoreType("jks").url(urlToXua).create();

		XuaClient client = ClientFactory.getXuaClient(xuaClientConfig);

		try (InputStream is = new FileInputStream(new File("src/test/resources/IdPAssertionHCP.xml"))) {

			// for testing load an IdP Assertion from disk.
			var idpAssertion = new AssertionDeserializerImpl().fromXmlByteArray(IOUtils.toByteArray(is));

			// define the attributes for the X-User Assertion request
			var role = new CodedWithEquivalentsBuilder().code("HCP").codeSystem("2.16.756.5.30.1.127.3.10.6")
					.displayName("Behandelnde(r)")
					.buildObject(Role.DEFAULT_NS_URI, Role.DEFAULT_ELEMENT_LOCAL_NAME, Role.DEFAULT_PREFIX);

			var purposeOfUse = new CodedWithEquivalentsBuilder().code("NORM").codeSystem("2.16.756.5.30.1.127.3.10.6")
					.displayName("Normal Access").buildObject(PurposeOfUse.DEFAULT_NS_URI,
							PurposeOfUse.DEFAULT_ELEMENT_LOCAL_NAME, PurposeOfUse.DEFAULT_PREFIX);

			// set the EPR SPID patient id
			final IheCx cx = new IheCx(spid, spidAssigningAuthorityOid);
			String eprSpid = cx.render();

			// build the X-User Assertion request
			var assertionRequest = new XUserAssertionRequestBuilderImpl().requestType(RequestType.WST_ISSUE)
					.tokenType(TokenType.OASIS_WSS_SAML_PROFILE_11_SAMLV20).purposeOfUse(purposeOfUse).subjectRole(role)
					.resourceId(eprSpid).create();

			// query the X-User Assertion
			List<XUserAssertionResponse> response = client.send(idpAssertion, assertionRequest);
			return response.get(0).getAssertion();
		}
	}

}
